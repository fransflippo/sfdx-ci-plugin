import * as forge from 'node-forge';

export class CertificateAndPrivateKey {
  public certificatePem: string;
  public privateKeyPem?: string;

  constructor(certificatePem: string, privateKeyPem?: string) {
    this.certificatePem = certificatePem;
    this.privateKeyPem = privateKeyPem;
  }
}

export interface GenerateCertificateCallback {
  beforeGeneratePrivateKey?: () => Promise<void>;
  onGeneratePrivateKey?: (privateKeyPem: string) => Promise<void>;
  beforeGenerateCertificate?: () => Promise<void>;
  onGenerateCertificate?: (certificatePem: string) => Promise<void>;
}

class CertificateGenerator {
  /**
   * Generates a private key and a certificate signed with that key and writes both
   * to files in PEM format.
   * @returns {string}
   */
  public async generateCertificateAndPrivateKey(callback?: GenerateCertificateCallback): Promise<CertificateAndPrivateKey> {
    const pki = forge.pki;

    // Create key pair
    if (callback && callback.beforeGeneratePrivateKey) {
      await callback.beforeGeneratePrivateKey();
    }
    const keys = pki.rsa.generateKeyPair(2048);

    // Convert private key to PEM format
    const privateKeyPem = pki.privateKeyToPem(keys.privateKey);
    if (callback && callback.onGeneratePrivateKey) {
      await callback.onGeneratePrivateKey(privateKeyPem);
    }

    // Create certificate
    if (callback && callback.beforeGenerateCertificate) {
      await callback.beforeGenerateCertificate();
    }
    const cert = pki.createCertificate();
    cert.publicKey = keys.publicKey;
    const attrs = [{
      name: 'commonName',
      value: 'example.org'
    }, {
      name: 'countryName',
      value: '000'
    }, {
      shortName: 'ST',
      value: 'None'
    }, {
      name: 'localityName',
      value: 'None'
    }, {
      name: 'organizationName',
      value: 'Certificate generated by sfdx-ci-plugin using Forge'
    }, {
      shortName: 'OU',
      value: 'https://github.com/fransflippo/sfdx-ci-plugin'
    }];
    cert.setSubject(attrs);
    cert.setIssuer(attrs);
    cert.version = 0;
    // Sign certificate
    cert.sign(keys.privateKey, forge.md.sha256.create());

    // Convert certificate to PEM format
    const certificatePem = pki.certificateToPem(cert);
    if (callback && callback.onGenerateCertificate) {
      await callback.onGenerateCertificate(certificatePem);
    }

    return new CertificateAndPrivateKey(certificatePem, privateKeyPem);
  }

}

export default new CertificateGenerator();
